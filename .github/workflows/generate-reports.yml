name: Reports generation

# Generate new reports release on push on main
on:
  push:
    branches:
      - main

jobs:
  ReportsGeneration:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      # Use cache if available for Gradle
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Merge PPS markdown files
        id: ppsreportfiles
        run: |
          echo "::set-output name=PPS_REPORT_FILES::$(printf '"%s" ' src/markdown/pps-report/*.md)"

      - name: Merge LSS markdown files
        id: lssreportfiles
        run: |
            echo "::set-output name=LSS_REPORT_FILES::$(printf '"%s" ' src/markdown/lss-report/*.md)"

      - name: Create output directory
        run: mkdir ./build/report

      - name: PPS report generation
        uses: docker://pandoc/latex:2.11.3.2
        with:
          args: -F pandoc-crossref --output=./build/report/PPSReport.pdf  ${{ steps.ppsreportfiles.outputs.PPS_REPORT_FILES }}

      - name: LSS report generation
        uses: docker://pandoc/latex:2.11.3.2
        with:
         args: -F pandoc-crossref --output=./build/report/LSSReport.pdf  ${{ steps.lssreportfiles.outputs.LSS_REPORT_FILES }}

      # todo print also other documents? (ex. sprint overview)

      - name: Generate version
        id: version
        run: |
          ./gradlew generateVersionFile
          echo "::set-output name=VERSION::$(cat ./build/version)\n"

      - name: Archive as artifacts
        uses: actions/upload-artifact@v2
        with:
          name: generatedReports
          path: report

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
         tag_name: reports-${{ steps.version.outputs.VERSION }}
         release_name: Release ${{ steps.version.outputs.VERSION }}
         draft: false
         prerelease: false

      - name: Upload Release Assets
        uses: dwenegar/upload-release-assets@v1
        env:
         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
         release_id: ${{ steps.create-release.outputs.id }}
         assets_path: report
