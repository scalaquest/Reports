name: Generate new pre-release

# When on a release branch is pushed a commit the [prerelease] keyword,
# a new prerelease is automatically named and generated.

on:
  push:
    branches:
      - 'release/**'
      - 'hotfix/**'

jobs:
  prerelease:
    name: Generate new pre-release
    if: contains(github.event.head_commit.message, '[prerelease]')
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle.kts') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Extract version from GitSemVer
        id: genversion
        run: |
          ./gradlew generateVersionFile
          RELEASE_VERSION=$(cat ./build/version)

      - name: Create pre-release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          prerelease: true

      - name: Prepare report generation
        id: reports
        run: |
          echo "::set-output name=PPS_REPORT_MERGED::$(printf '"%s" ' src/markdown/pps-report/*.md)"
          echo "::set-output name=LSS_REPORT_MERGED::$(printf '"%s" ' src/markdown/lss-report/*.md)"
          mkdir report

      - name: Generate PPS report
        uses: docker://pandoc/latex:2.11.3.2
        with:
          args: -F pandoc-crossref --output=report/PPSReport-${{ env.RELEASE_VERSION }}.pdf  ${{ steps.reports.outputs.PPS_REPORT_MERGED }}

      - name: Generate LSS report
        uses: docker://pandoc/latex:2.11.3.2
        with:
          args: -F pandoc-crossref --output=report/LSSReport-${{ env.RELEASE_VERSION }}.pdf  ${{ steps.reports.outputs.LSS_REPORT_MERGED }}

      - name: Upload release assets
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.create-release.outputs.id }}
          assets_path: ./report
